/* App.svelte generated by Svelte v3.54.0 */
import {
	SvelteComponent,
	assign,
	attr,
	binding_callbacks,
	detach,
	element,
	exclude_internal_props,
	init,
	insert,
	noop,
	safe_not_equal
} from "svelte/internal";

import React from "react";
import { createRoot } from 'react-dom/client';
import { onDestroy, onMount } from "svelte";

function create_fragment(ctx) {
	let div;
	let div_class_value;

	return {
		c() {
			div = element("div");
			attr(div, "class", div_class_value = /*$$props*/ ctx[1].class);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			/*div_binding*/ ctx[2](div);
		},
		p(ctx, [dirty]) {
			if (dirty & /*$$props*/ 2 && div_class_value !== (div_class_value = /*$$props*/ ctx[1].class)) {
				attr(div, "class", div_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			/*div_binding*/ ctx[2](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const e = React.createElement;
	let container;
	let ReactApp;

	onMount(() => {
		const { el, children, class: _, ...props } = $$props;

		try {
			ReactApp = createRoot(container);
			ReactApp.render(e(el, props, children));
		} catch(err) {
			console.warn(`react-adapter failed to mount.`, { err });
		}
	});

	onDestroy(() => {
		try {
			ReactApp && ReactApp.unmount();
		} catch(err) {
			console.warn(`react-adapter failed to unmount.`, { err });
		}
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			container = $$value;
			$$invalidate(0, container);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$props = exclude_internal_props($$props);
	return [container, $$props, div_binding];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;